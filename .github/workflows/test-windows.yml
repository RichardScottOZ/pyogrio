# derived from Fiona: https://github.com/Toblerity/Fiona
name: Windows Test

on: [push, pull_request]

jobs:
  test:
    name: Python ${{ matrix.python }} / GDAL ${{ matrix.GDAL_VERSION }}
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        include:
          - python: 3.6
            GDAL_VERSION: 2.4.4
            GIS_INTERNALS: release-1911-x64-gdal-2-4-4-mapserver-7-4-3.zip
            GIS_INTERNALS_LIBS: release-1911-x64-gdal-2-4-4-mapserver-7-4-3-libs.zip
            allow_failure: false

          # - python: 3.8
          #   GDAL_VERSION: 3.0.4
          #   GIS_INTERNALS: release-1911-x64-gdal-3-0-4-mapserver-7-4-3.zip
          #   GIS_INTERNALS_LIBS: release-1911-x64-gdal-3-0-4-mapserver-7-4-3-libs.zip
          #   allow_failure: false

          - python: 3.8
            GDAL_VERSION: 3.1.4
            GIS_INTERNALS: release-1911-x64-gdal-3-1-4-mapserver-7-6-1.zip
            GIS_INTERNALS_LIBS: release-1911-x64-gdal-3-1-4-mapserver-7-6-1-libs.zip
            allow_failure: false

          - python: 3.9
            GDAL_VERSION: 3.2.1
            GIS_INTERNALS: release-1911-x64-gdal-3-2-1-mapserver-7-6-2.zip
            GIS_INTERNALS_LIBS: release-1911-x64-gdal-3-2-1-mapserver-7-6-2-libs.zip
            allow_failure: false

    env:
      GDAL_VERSION: ${{ matrix.GDAL_VERSION }}
      GIS_INTERNALS: ${{ matrix.GIS_INTERNALS }}
      GIS_INTERNALS_LIBS: ${{ matrix.GIS_INTERNALS_LIBS }}
      GDAL_DATA: "C:\\gdal\\bin\\gdal-data"
      PROJ_LIB: "C:\\gdal\\bin\\proj6\\share"

    steps:
      - uses: actions/checkout@v2

      - name: Cache GDAL binaries
        uses: actions/cache@v2
        with:
          path: C:\gdal
          key: ${{ runner.os }}-gdal-${{ matrix.GDAL_VERSION }}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Download GDAL
        run: |
          # Only download if not already cached
          if (!(test-path C:\gdal)) {
            curl http://download.gisinternals.com/sdk/downloads/$env:GIS_INTERNALS --output gdalbin.zip
            Expand-Archive -LiteralPath gdalbin.zip -DestinationPath C:\gdal
            curl http://download.gisinternals.com/sdk/downloads/$env:GIS_INTERNALS_LIBS --output gdallibs.zip
            Expand-Archive -LiteralPath gdallibs.zip -DestinationPath C:\gdal
            Get-ChildItem -Path C:\gdal
            Get-ChildItem -Path C:\gdal\bin
            Get-ChildItem -Path C:\gdal\bin\gdal-data
            Get-ChildItem -Path C:\gdal\bin\proj6\share
          }

      - name: Set env variables
        run: |
          echo "Print env from GH"
          echo "C:\gdal\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "GITHUB_PATH"
          Get-Content -Path $env:GITHUB_PATH

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

        # echo "Install pygeos from source  (required for geopandas)"
        # python -m pip install pygeos --no-binary pygeos --no-build-isolation --install-option=build_ext --install-option="-IC:\gdal\include" --install-option="-lgeos_c" --install-option="-LC:\gdal\lib"
        # echo "Print pygeos GEOS version"
        # python -c "import pygeos; print(pygeos.geos_version_string)"
        # echo ""
        # echo "Install shapely from source (required for geopandas)"
        # python -m pip install shapely --no-binary shapely --no-build-isolation --install-option=build_ext --install-option="-IC:\gdal\include" --install-option="-lgeos_c" --install-option="-LC:\gdal\lib"
        # echo "Print shapely GEOS version"

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip wheel
          echo "Install Cython and numpy (build deps)"
          python -m pip install cython~=0.29 numpy~=1.19
          echo "Install pygeos, shapely, pyproj (required by geopandas)"
          python -m pip install shapely pygeos pyproj
          echo ""
          echo "print shapely GEOS version"
          python -c "import shapely.geos; print(shapely.geos.geos_version_string);"
          echo ""
          echo "try with explicit dll path"
          python -c "import os; os.add_dll_directory('c:/gdal/bin'); import shapely.geos; print(shapely.geos.geos_version_string);"
          echo ""
          echo "Install fiona from source (required for geopandas)"
          python -m pip install fiona --no-binary fiona --install-option=build_ext --install-option="-IC:\gdal\include" --install-option="-lgdal_i" --install-option="-LC:\gdal\lib"
          echo ""
          echo "Print fiona GDAL version"
          python -c "import os; os.add_dll_directory('c:/gdal/bin');import fiona; print(fiona.__gdal_version__);"
          echo ""
          echo "Install geopandas"
          python -m pip install geopandas~=0.9
          echo "Install test dependencies"
          python -m pip install pytest pytest-cov

      - name: Build pyogrio
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          python -m pip install --install-option=build_ext --install-option="-IC:\gdal\include" --install-option="-lgdal_i" --install-option="-LC:\gdal\lib" --no-deps --force-reinstall --no-use-pep517 -e . -v

      - name: Copy DLLs
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          mkdir $env:GITHUB_WORKSPACE\pyogrio\.libs -Force
          Copy-Item -Path "C:\gdal\bin\*.dll" -Destination "$env:GITHUB_WORKSPACE\pyogrio\.libs" -Recurse
          mkdir $env:GITHUB_WORKSPACE\pyogrio\.libs\licenses -Force
          Copy-Item -Path "C:\gdal\*.rtf" -Destination "$env:GITHUB_WORKSPACE\pyogrio\.libs\licenses" -Recurse

      - name: Print Environment
        continue-on-error: true
        run: |
          python -m pip freeze

      - name: Print DLLs required
        continue-on-error: true
        run: |
          echo "Dependencies of GDAL DLL"
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\bin\HostX86\x64\dumpbin.exe" /DEPENDENTS c:\gdal\bin\gdal302.dll
          echo ""
          echo "Dependencies of PYD files"
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\bin\HostX86\x64\dumpbin.exe" /DEPENDENTS D:\a\pyogrio\pyogrio\pyogrio\_io.cp39-win_amd64.pyd
          & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\bin\HostX86\x64\dumpbin.exe" /DEPENDENTS D:\a\pyogrio\pyogrio\pyogrio\_ogr.cp39-win_amd64.pyd

      - name: Check module status
        continue-on-error: true
        run: |
          echo "Attempt to load pyogrio Cython module"
          python -c "from pyogrio._io import ogr_list_layers, ogr_read_info"

      - name: Test dep imports in test
        continue-on-error: true
        run: |
          echo "Manually execute conftest.py"
          python tests/conftest.py

      - name: pytest
        continue-on-error: ${{ matrix.allow_failure == 'true' }}
        run: |
          python -m pytest -sv --cov=pyogrio --cov-report term-missing
